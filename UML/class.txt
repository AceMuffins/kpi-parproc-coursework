@startuml
left to right direction
class server{
     {field} -pool : thread_pool
     {field} -index : inverted_index
     {method} -process_client() : void
     {method} -receive_buffer() : bool
     {method} -handle_disconnect() : void
     {method} -scheduler_function() void
     {method} -get_formatted_time() std::wstring
}

class thread_pool{
     {field} -m_rw_lock : mutable std::shared_mutex
     {field} -m_status_lock : mutable std::shared_mutex
     {field} -m_print_lock : mutable std::shared_mutex
     {field} -m_task_waiter : mutable std::condition_variable_any
     {field} -m_workers : std::vector<std::thread>
     {field} -m_tasks : task_queue<std::function<std::string()>>
     {field} -m_initialized : bool 
     {field} -m_terminated : bool

     {method} +initialize(const size_t worker_count, bool debug_mode) : void
     {method} +terminate() : void
     {method} +terminate_now() : void
     {method} +debug_terminate() : void
     {method} +routine() : void
     {method} +working() : bool
     {method} +working_unsafe() : bool
     {method} +add_task(task_t&& task, arguments&&... parameters) : size_t
}

class task_queue{
     {field} -mutable read_write_lock m_rw_lock;
     {field} -std::queue<task_type_t> m_tasks;
     {field} -std::queue<size_t> m_ids;

     {method} +bool empty() const;
     {method} +size_t size() const;
     {method} +void clear();
     {method} +bool pop(task_type_t& task, size_t& id);
     {method} +size_t emplace(arguments&&... parameters)
}

class inverted_index{
     {field} -dict : std::map<std::wstring, std::vector<std::wstring>>
     {field} -processed_files : std::unordered_set<std::wstring> 
     {method} +add_files((std::vector<std::wstring>& filenames) : void 
     {method} +debug_list_files() : void 
     {method} +search(std::vector<std::wstring>& word_query) : std::vector<std::wstring> 
     {method} +clean_string(std::wstring input) : std::wstring
     {method} +get_processed_files() : std::unordered_set<std::wstring>
}

server::pool <.. thread_pool
thread_pool::m_tasks <.. task_queue


server::file_index <.. inverted_index
@enduml
